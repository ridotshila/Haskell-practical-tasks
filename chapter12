import System.IO
import Control.Exception (catch, IOException)
import Data.Char (toLower)
import Data.List (sort)

-- HC12T1: Print welcome message
hc12t1 :: IO ()
hc12t1 = putStrLn "Welcome to Haskell Programming!"

-- HC12T2: Add two numbers and print
addTwoNumbers :: Int -> Int -> Int
addTwoNumbers x y = x + y

hc12t2 :: IO ()
hc12t2 = do
  putStrLn "Sum of 5 and 7 is:"
  print (addTwoNumbers 5 7)

-- HC12T3: Factorial function
factorial :: Integer -> Integer
factorial 0 = 1
factorial n = n * factorial (n - 1)

hc12t3 :: IO ()
hc12t3 = do
  putStrLn "Factorial of 5 is:"
  print (factorial 5)

-- HC12T4: First 10 Fibonacci numbers using recursion
fib :: Int -> Integer
fib 0 = 0
fib 1 = 1
fib n = fib (n - 1) + fib (n - 2)

hc12t4 :: IO ()
hc12t4 = do
  putStrLn "First 10 Fibonacci numbers:"
  print $ map fib [0..9]

-- HC12T5: Check palindrome
isPalindrome :: String -> Bool
isPalindrome s = cleaned == reverse cleaned
  where cleaned = map toLower $ filter (/= ' ') s

hc12t5 :: IO ()
hc12t5 = do
  putStrLn "Enter a string to check if it's a palindrome:"
  s <- getLine
  putStrLn $ if isPalindrome s then "It's a palindrome!" else "Not a palindrome."

-- HC12T6: Read list of integers and print sorted
hc12t6 :: IO ()
hc12t6 = do
  putStrLn "Enter integers separated by spaces:"
  line <- getLine
  let numbers = map read (words line) :: [Int]
  putStrLn "Sorted list:"
  print (sort numbers)

-- HC12T7: Calculate circle area
calculateCircleArea :: Floating a => a -> a
calculateCircleArea r = pi * r * r

hc12t7 :: IO ()
hc12t7 = do
  putStrLn "Area of circle with radius 5:"
  print (calculateCircleArea 5)

-- HC12T8: Merge two sorted lists
mergeLists :: Ord a => [a] -> [a] -> [a]
mergeLists [] ys = ys
mergeLists xs [] = xs
mergeLists (x:xs) (y:ys)
  | x < y     = x : mergeLists xs (y:ys)
  | otherwise = y : mergeLists (x:xs) ys

hc12t8 :: IO ()
hc12t8 = do
  let list1 = [1,3,5,7]
      list2 = [2,4,6,8]
  putStrLn "Merging [1,3,5,7] and [2,4,6,8]:"
  print $ mergeLists list1 list2

-- HC12T9: Read a file and print content, handle errors
hc12t9 :: FilePath -> IO ()
hc12t9 filename = do
  contentOrError <- catch (readFile filename >>= return . Right)
                          (\e -> return $ Left (e :: IOException))
  case contentOrError of
    Right content -> putStrLn content
    Left _ -> putStrLn $ "Error: Could not open file " ++ filename

-- HC12T10: Simple math operations (square and cube)
square :: Num a => a -> a
square x = x * x

cube :: Num a => a -> a
cube x = x * x * x

hc12t10 :: IO ()
hc12t10 = do
  putStrLn "Square of 4:"
  print (square 4)
  putStrLn "Cube of 3:"
  print (cube 3)

-- Main menu to test all
main :: IO ()
main = do
  putStrLn "HC12 Tasks: Enter task number 1-10, or 0 to exit."
  loop
  where
    loop = do
      putStr "Task number: "
      choice <- getLine
      case choice of
        "1" -> hc12t1 >> loop
        "2" -> hc12t2 >> loop
        "3" -> hc12t3 >> loop
        "4" -> hc12t4 >> loop
        "5" -> hc12t5 >> loop
        "6" -> hc12t6 >> loop
        "7" -> hc12t7 >> loop
        "8" -> hc12t8 >> loop
        "9" -> do
          putStrLn "Enter filename:"
          f <- getLine
          hc12t9 f
          loop
        "10" -> hc12t10 >> loop
        "0" -> putStrLn "Goodbye!"
        _   -> putStrLn "Invalid choice." >> loop
